import os

use_gmcf = True

debug = False
dd = ARGUMENTS.get('d','0')
if dd == '1':
	debug = True
 
verbose = False
vv = ARGUMENTS.get('v','0')
if vv == '1':
	verbose = True
	    
use_netcdf = False
timings = False
TIMSERIS_FIXED = False


fsources = Split("""
./adam.f95
./anime.f95
./aveflow.f95
./bondFG.f95
./bondv1.f95
./boundp.f95
./boundsm.f95
./feedbf.f95
./feedbfm.f95
./grid.f95
./ifdata.f95
./init.f95
./les.f95
./main_gmcf.f95
./press.f95
./set.f95
./timdata.f95
./vel2.f95
./velFG.f95
./velnw.f95
common_sn.f95
params_common_sn.f95
""")

if not use_gmcf:
	fsources+=['./initial_wind_profile.f95']
else:
	fsources+=['./gmcfAPIles.f95']
				
if TIMSERIS_FIXED:
	fsources+=['./timseris.f95']

LIBS = ['gmcfAPI','m']

NETCDF_INC = ''
NETCDF_LIB = ''
if use_netcdf:
	NETCDF=os.environ.get('NETCDF')
	fsources+=['./module_LES_write_netcdf.f95']
	NETCDF_INC = NETCDF+'/include'
	NETCDF_LIB = NETCDF+'/lib'
	LIBS+=['netcdff','netcdf']
			
FC=os.environ.get('FC')
		
LDFLAGS= [] # '-fopenmp'] # ['-Wl,-stack_size,0x40000000']
FFLAGS  = ['-cpp','-Ofast', '-m64', '-Wall','-ffree-form', '-fconvert=big-endian']

FFLAGS+=['-DIFBF=1','-DICAL=0','-DIADAM=0']

if use_gmcf:
	FFLAGS+=['-DUSE_GMCF']
if debug:
	FFLAGS+=['-DWV_DEBUG']
if verbose:
    FFLAGS+=['-DVERBOSE'] 

if timings:
	FFLAGS+=['-DTIMINGS'] 
if use_netcdf:
	FFLAGS+=['-DUSE_NETCDF_OUTPUT']


envF=Environment(F95=FC,LINK=FC,LINKFLAGS=LDFLAGS,F95FLAGS=FFLAGS,F95PATH=['.','../../lib',NETCDF_INC])

gmcflib = envF.Library('les_gmcf',fsources,LIBS=LIBS,LIBPATH=['.','../../lib',NETCDF_LIB])
envF.Alias('install',envF.Install('../GMCF/Models/',gmcflib)) 
